{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\WebProgramming\\\\ErrFace-_-Auth\\\\Face-_-Auth\\\\src\\\\components\\\\Message.js\";\nimport React, { Component } from 'react';\nimport firebase from '../firebase.js';\nimport Cookies from 'universal-cookie';\nimport styles from '../styles/recaptcha.module.css';\n\nclass Message extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: 'Welcome Visitor'\n    };\n  }\n\n  storeToken(token) {\n    const cookies = new Cookies();\n    cookies.set('authtoken', token, {\n      path: '/',\n      expires: new Date(Date.now() + 2592000)\n    });\n    console.log(cookies.get('authtoken'));\n  }\n\n  sendOTP() {\n    let recaptcha = new firebase.auth.RecaptchaVerifier('recaptcha');\n    let number = '+6285695900268';\n    firebase.auth().signInWithPhoneNumber(number, recaptcha).then(e => {\n      let code = prompt('enter the OTP', '');\n      if (code == null) return;\n      e.confirm(code).then(result => {\n        this.storeToken(result.user.refreshToken);\n      }).catch(error => {\n        alert(error);\n      });\n    });\n  }\n\n  changeMessage() {\n    this.setState({\n      message: 'Thank you for subscribing'\n    });\n  }\n\n  componentDidMount() {\n    const cookies = new Cookies();\n    const currentCookie = cookies.get('authtoken');\n    if (currentCookie === undefined) this.sendOTP();else console.log(cookies.get('authtoken'));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"recaptcha\",\n      className: styles.recaptcha,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Message;","map":{"version":3,"sources":["E:/Project/WebProgramming/ErrFace-_-Auth/Face-_-Auth/src/components/Message.js"],"names":["React","Component","firebase","Cookies","styles","Message","constructor","state","message","storeToken","token","cookies","set","path","expires","Date","now","console","log","get","sendOTP","recaptcha","auth","RecaptchaVerifier","number","signInWithPhoneNumber","then","e","code","prompt","confirm","result","user","refreshToken","catch","error","alert","changeMessage","setState","componentDidMount","currentCookie","undefined","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;;AACA,MAAMC,OAAN,SAAsBJ,SAAtB,CAA+B;AAG3BK,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAO;AACb,UAAMC,OAAO,GAAG,IAAIR,OAAJ,EAAhB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB,EAAgC;AAACG,MAAAA,IAAI,EAAE,GAAP;AAAYC,MAAAA,OAAO,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAW,OAApB;AAArB,KAAhC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAO,CAACQ,GAAR,CAAY,WAAZ,CAAZ;AACH;;AAEDC,EAAAA,OAAO,GAAE;AACL,QAAIC,SAAS,GAAG,IAAInB,QAAQ,CAACoB,IAAT,CAAcC,iBAAlB,CAAoC,WAApC,CAAhB;AACA,QAAIC,MAAM,GAAG,gBAAb;AAEAtB,IAAAA,QAAQ,CAACoB,IAAT,GAAgBG,qBAAhB,CAAsCD,MAAtC,EAA8CH,SAA9C,EAAyDK,IAAzD,CAA+DC,CAAD,IAAO;AAEjE,UAAIC,IAAI,GAAGC,MAAM,CAAC,eAAD,EAAkB,EAAlB,CAAjB;AAEA,UAAGD,IAAI,IAAI,IAAX,EAAiB;AACjBD,MAAAA,CAAC,CAACG,OAAF,CAAUF,IAAV,EAAgBF,IAAhB,CAAsBK,MAAD,IAAY;AAC7B,aAAKtB,UAAL,CAAgBsB,MAAM,CAACC,IAAP,CAAYC,YAA5B;AACH,OAFD,EAEGC,KAFH,CAEUC,KAAD,IAAS;AACdC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACH,OAJD;AAKH,KAVD;AAWH;;AAEDE,EAAAA,aAAa,GAAE;AACX,SAAKC,QAAL,CAAc;AACV9B,MAAAA,OAAO,EAAE;AADC,KAAd;AAGH;;AAED+B,EAAAA,iBAAiB,GAAE;AACf,UAAM5B,OAAO,GAAG,IAAIR,OAAJ,EAAhB;AACA,UAAMqC,aAAa,GAAG7B,OAAO,CAACQ,GAAR,CAAY,WAAZ,CAAtB;AAEA,QAAGqB,aAAa,KAAKC,SAArB,EACI,KAAKrB,OAAL,GADJ,KAGIH,OAAO,CAACC,GAAR,CAAYP,OAAO,CAACQ,GAAR,CAAY,WAAZ,CAAZ;AACP;;AAEDuB,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,WAAR;AAAoB,MAAA,SAAS,EAAEtC,MAAM,CAACiB,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAMH;;AAxD0B;;AA2D/B,eAAehB,OAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport firebase from '../firebase.js'\r\nimport Cookies from 'universal-cookie'\r\nimport styles from '../styles/recaptcha.module.css'\r\nclass Message extends Component{\r\n    \r\n    \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            message: 'Welcome Visitor'\r\n        }\r\n    }\r\n    \r\n    storeToken(token){\r\n        const cookies = new Cookies();\r\n        cookies.set('authtoken', token, {path: '/', expires: new Date(Date.now()+2592000)})\r\n        console.log(cookies.get('authtoken'))\r\n    }\r\n\r\n    sendOTP(){\r\n        let recaptcha = new firebase.auth.RecaptchaVerifier('recaptcha')\r\n        let number = '+6285695900268'\r\n\r\n        firebase.auth().signInWithPhoneNumber(number, recaptcha).then((e) => {\r\n\r\n            let code = prompt('enter the OTP', '')\r\n\r\n            if(code == null) return\r\n            e.confirm(code).then((result) => {\r\n                this.storeToken(result.user.refreshToken)\r\n            }).catch((error)=>{\r\n                alert(error)\r\n            })\r\n        })\r\n    }\r\n\r\n    changeMessage(){\r\n        this.setState({\r\n            message: 'Thank you for subscribing'\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        const cookies = new Cookies()\r\n        const currentCookie = cookies.get('authtoken')\r\n\r\n        if(currentCookie === undefined)\r\n            this.sendOTP()\r\n        else\r\n            console.log(cookies.get('authtoken'))\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div id=\"recaptcha\" className={styles.recaptcha}></div>\r\n                {/* <h1>{this.state.message}</h1> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message"]},"metadata":{},"sourceType":"module"}